diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..a8ef79c
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+patches/
diff --git a/config.def.h b/config.def.h
index 9efa774..9a00d6b 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,25 +1,27 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int borderpx  = 2;        /* border pixel of windows */
+static const unsigned int gappx     = 8;       /* gap pixel between windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
-static const char col_gray1[]       = "#222222";
-static const char col_gray2[]       = "#444444";
-static const char col_gray3[]       = "#bbbbbb";
-static const char col_gray4[]       = "#eeeeee";
-static const char col_cyan[]        = "#005577";
+static const char *fonts[]          = { "MartianMono Nerd Font:size=11" };
+static const char dmenufont[]       = "MartianMono Nerd Font:size=11";
+static const char col_gray1[]       = "#222222"; /* background color */
+static const char col_gray2[]       = "#2b2f33"; /* inactive window border color */
+static const char col_gray3[]       = "#d0d0d0"; /* font color */
+static const char col_gray4[]       = "#f0f0f0"; /* current tag and current window font color */
+static const char col_cyan[]        = "#bd93f9"; /* top bar second color */
+static const char act_win_bord[]    = "#bd93f9"; /* active window border color */
 static const char *colors[][3]      = {
 	/*               fg         bg         border   */
 	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+	[SchemeSel]  = { col_gray4, col_cyan, act_win_bord  },
 };
 
 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8" };
 
 static const Rule rules[] = {
 	/* xprop(1):
@@ -28,7 +30,7 @@ static const Rule rules[] = {
 	 */
 	/* class      instance    title       tags mask     isfloating   monitor */
 	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+	{ "Firefox",  NULL,       NULL,       1 << 5,       0,           -1 },
 };
 
 /* layout(s) */
@@ -45,7 +47,8 @@ static const Layout layouts[] = {
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
+
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -55,46 +58,75 @@ static const Layout layouts[] = {
 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
+/* high priority apps for dmenu */
+static const char dmenuhpapps[] = "librewolf,brave-bin,torbrowser-launcher,signal-desktop,logseq-desktop-bin";
+
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
+static const char *dmenucmd[]   = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, "-hp", dmenuhpapps, NULL };
+static const char *termcmd[]       = { "alacritty", NULL }; /* Default terminal emulator for dwm */
+static const char *rangercmd[]     = { "alacritty", "-e", "ranger", NULL};
+static const char *yazicmd[]       = { "alacritty", "-e", "yazi", NULL};
+static const char *brupcmd[]       = { "xbacklight", "-inc", "5", NULL};
+static const char *brdowncmd[]     = { "xbacklight", "-dec", "5", NULL};
+static const char *kbdbrupcmd[]    = { "kbdbacklight", "-inc", "5", NULL};
+static const char *kbdbrdowncmd[]  = { "kbdbacklight", "-dec", "5", NULL};
+static const char *volupcmd[]      = { "amixer", "set", "Master", "2%+", NULL};
+static const char *voldowncmd[]    = { "amixer", "set", "Master", "2%-", NULL};
+static const char *volmutecmd[]    = { "amixer", "set", "Master", "0%", NULL};
+static const char *sscmd[]         = { "scrot", "-fs", NULL };
+
+#include "shiftview.c"
 
-static const Key keys[] = {
-	/* modifier                     key        function        argument */
-	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
-	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
-	{ MODKEY,                       XK_b,      togglebar,      {0} },
-	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
-	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
-	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
-	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
-	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
-	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
-	{ MODKEY,                       XK_Return, zoom,           {0} },
-	{ MODKEY,                       XK_Tab,    view,           {0} },
-	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
-	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
-	{ MODKEY,                       XK_space,  setlayout,      {0} },
-	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
-	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
-	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
-	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
-	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
-	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
-	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
-	TAGKEYS(                        XK_1,                      0)
-	TAGKEYS(                        XK_2,                      1)
-	TAGKEYS(                        XK_3,                      2)
-	TAGKEYS(                        XK_4,                      3)
-	TAGKEYS(                        XK_5,                      4)
-	TAGKEYS(                        XK_6,                      5)
-	TAGKEYS(                        XK_7,                      6)
-	TAGKEYS(                        XK_8,                      7)
-	TAGKEYS(                        XK_9,                      8)
-	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+static Key keys[] = {
+    /* modifier             key                         function        argument */
+	{ 0,                    XF86XK_MonBrightnessUp,     spawn,          {.v = brupcmd } },
+	{ 0,                    XF86XK_MonBrightnessDown,   spawn,          {.v = brdowncmd } },
+        { 0,                    XF86XK_KbdBrightnessUp,     spawn,          {.v = kbdbrupcmd } },
+	{ 0,                    XF86XK_KbdBrightnessDown,   spawn,          {.v = kbdbrdowncmd } },
+	{ 0,                    XF86XK_AudioRaiseVolume,    spawn,          {.v = volupcmd } },
+	{ 0,                    XF86XK_AudioLowerVolume,    spawn,          {.v = voldowncmd } },
+	{ 0,                    XF86XK_AudioMute,           spawn,          {.v = volmutecmd } },
+	{ MODKEY,               XK_p,                       spawn,          {.v = dmenucmd } },
+	{ MODKEY,               XK_Return,                  spawn,          {.v = termcmd } },
+	{ MODKEY,               XK_r,                       spawn,          {.v = rangercmd } },
+	{ MODKEY,               XK_e,                       spawn,          {.v = yazicmd } },
+	{ MODKEY|ShiftMask,     XK_s,                       spawn,          {.v = sscmd } },
+	{ MODKEY,               XK_b,                       togglebar,      {0} },
+	{ MODKEY,               XK_j,                       focusstack,     {.i = +1 } },
+	{ MODKEY,               XK_k,                       focusstack,     {.i = -1 } },
+	{ MODKEY,               XK_i,                       incnmaster,     {.i = +1 } },
+	{ MODKEY,               XK_d,                       incnmaster,     {.i = -1 } },
+	{ MODKEY,               XK_h,                       setmfact,       {.f = -0.05} },
+	{ MODKEY,               XK_l,                       setmfact,       {.f = +0.05} },
+	{ MODKEY|ShiftMask,     XK_Return,                  zoom,           {0} },
+	{ MODKEY,               XK_Tab,                     view,           {0} },
+	{ MODKEY,               XK_c,                       killclient,     {0} },
+	{ MODKEY,               XK_t,                       setlayout,      {.v = &layouts[0]} },
+	{ MODKEY,               XK_f,                       setlayout,      {.v = &layouts[1]} },
+	{ MODKEY,               XK_m,                       setlayout,      {.v = &layouts[2]} },
+	{ MODKEY,               XK_space,                   setlayout,      {0} },
+	{ MODKEY|ShiftMask,     XK_space,                   togglefloating, {0} },
+	{ MODKEY,               XK_0,                       view,           {.ui = ~0 } },
+	{ MODKEY|ShiftMask,     XK_0,                       tag,            {.ui = ~0 } },
+	{ MODKEY,               XK_comma,                   focusmon,       {.i = -1 } },
+	{ MODKEY,               XK_period,                  focusmon,       {.i = +1 } },
+	{ MODKEY|ShiftMask,     XK_comma,                   tagmon,         {.i = -1 } },
+	{ MODKEY|ShiftMask,     XK_period,                  tagmon,         {.i = +1 } },
+	{ MODKEY,               XK_minus,                   setgaps,        {.i = -1 } },
+	{ MODKEY,               XK_equal,                   setgaps,        {.i = +1 } },
+	{ MODKEY|ShiftMask,     XK_equal,                   setgaps,        {.i = 0  } },
+	{ MODKEY,               XK_Left,                    shiftview,      {.i = -1 } },
+	{ MODKEY,               XK_Right,                   shiftview,      {.i = +1 } },
+	TAGKEYS(                XK_1,                                        0)
+	TAGKEYS(                XK_2,                                        1)
+	TAGKEYS(                XK_3,                                        2)
+	TAGKEYS(                XK_4,                                        3)
+	TAGKEYS(                XK_5,                                        4)
+	TAGKEYS(                XK_6,                                        5)
+	TAGKEYS(                XK_7,                                        6)
+	TAGKEYS(                XK_8,                                        7)
+	{ MODKEY|ShiftMask,     XK_q,                       quit,           {0} },
 };
 
 /* button definitions */
diff --git a/config.h b/config.h
new file mode 100644
index 0000000..9a00d6b
--- /dev/null
+++ b/config.h
@@ -0,0 +1,148 @@
+/* See LICENSE file for copyright and license details. */
+
+/* appearance */
+static const unsigned int borderpx  = 2;        /* border pixel of windows */
+static const unsigned int gappx     = 8;       /* gap pixel between windows */
+static const unsigned int snap      = 32;       /* snap pixel */
+static const int showbar            = 1;        /* 0 means no bar */
+static const int topbar             = 1;        /* 0 means bottom bar */
+static const char *fonts[]          = { "MartianMono Nerd Font:size=11" };
+static const char dmenufont[]       = "MartianMono Nerd Font:size=11";
+static const char col_gray1[]       = "#222222"; /* background color */
+static const char col_gray2[]       = "#2b2f33"; /* inactive window border color */
+static const char col_gray3[]       = "#d0d0d0"; /* font color */
+static const char col_gray4[]       = "#f0f0f0"; /* current tag and current window font color */
+static const char col_cyan[]        = "#bd93f9"; /* top bar second color */
+static const char act_win_bord[]    = "#bd93f9"; /* active window border color */
+static const char *colors[][3]      = {
+	/*               fg         bg         border   */
+	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
+	[SchemeSel]  = { col_gray4, col_cyan, act_win_bord  },
+};
+
+/* tagging */
+static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8" };
+
+static const Rule rules[] = {
+	/* xprop(1):
+	 *	WM_CLASS(STRING) = instance, class
+	 *	WM_NAME(STRING) = title
+	 */
+	/* class      instance    title       tags mask     isfloating   monitor */
+	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
+	{ "Firefox",  NULL,       NULL,       1 << 5,       0,           -1 },
+};
+
+/* layout(s) */
+static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
+static const int nmaster     = 1;    /* number of clients in master area */
+static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
+
+static const Layout layouts[] = {
+	/* symbol     arrange function */
+	{ "[]=",      tile },    /* first entry is default */
+	{ "><>",      NULL },    /* no layout function means floating behavior */
+	{ "[M]",      monocle },
+};
+
+/* key definitions */
+#define MODKEY Mod4Mask
+
+#define TAGKEYS(KEY,TAG) \
+	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
+	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
+	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
+	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
+
+/* helper for spawning shell commands in the pre dwm-5.0 fashion */
+#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
+
+/* high priority apps for dmenu */
+static const char dmenuhpapps[] = "librewolf,brave-bin,torbrowser-launcher,signal-desktop,logseq-desktop-bin";
+
+/* commands */
+static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
+static const char *dmenucmd[]   = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, "-hp", dmenuhpapps, NULL };
+static const char *termcmd[]       = { "alacritty", NULL }; /* Default terminal emulator for dwm */
+static const char *rangercmd[]     = { "alacritty", "-e", "ranger", NULL};
+static const char *yazicmd[]       = { "alacritty", "-e", "yazi", NULL};
+static const char *brupcmd[]       = { "xbacklight", "-inc", "5", NULL};
+static const char *brdowncmd[]     = { "xbacklight", "-dec", "5", NULL};
+static const char *kbdbrupcmd[]    = { "kbdbacklight", "-inc", "5", NULL};
+static const char *kbdbrdowncmd[]  = { "kbdbacklight", "-dec", "5", NULL};
+static const char *volupcmd[]      = { "amixer", "set", "Master", "2%+", NULL};
+static const char *voldowncmd[]    = { "amixer", "set", "Master", "2%-", NULL};
+static const char *volmutecmd[]    = { "amixer", "set", "Master", "0%", NULL};
+static const char *sscmd[]         = { "scrot", "-fs", NULL };
+
+#include "shiftview.c"
+
+static Key keys[] = {
+    /* modifier             key                         function        argument */
+	{ 0,                    XF86XK_MonBrightnessUp,     spawn,          {.v = brupcmd } },
+	{ 0,                    XF86XK_MonBrightnessDown,   spawn,          {.v = brdowncmd } },
+        { 0,                    XF86XK_KbdBrightnessUp,     spawn,          {.v = kbdbrupcmd } },
+	{ 0,                    XF86XK_KbdBrightnessDown,   spawn,          {.v = kbdbrdowncmd } },
+	{ 0,                    XF86XK_AudioRaiseVolume,    spawn,          {.v = volupcmd } },
+	{ 0,                    XF86XK_AudioLowerVolume,    spawn,          {.v = voldowncmd } },
+	{ 0,                    XF86XK_AudioMute,           spawn,          {.v = volmutecmd } },
+	{ MODKEY,               XK_p,                       spawn,          {.v = dmenucmd } },
+	{ MODKEY,               XK_Return,                  spawn,          {.v = termcmd } },
+	{ MODKEY,               XK_r,                       spawn,          {.v = rangercmd } },
+	{ MODKEY,               XK_e,                       spawn,          {.v = yazicmd } },
+	{ MODKEY|ShiftMask,     XK_s,                       spawn,          {.v = sscmd } },
+	{ MODKEY,               XK_b,                       togglebar,      {0} },
+	{ MODKEY,               XK_j,                       focusstack,     {.i = +1 } },
+	{ MODKEY,               XK_k,                       focusstack,     {.i = -1 } },
+	{ MODKEY,               XK_i,                       incnmaster,     {.i = +1 } },
+	{ MODKEY,               XK_d,                       incnmaster,     {.i = -1 } },
+	{ MODKEY,               XK_h,                       setmfact,       {.f = -0.05} },
+	{ MODKEY,               XK_l,                       setmfact,       {.f = +0.05} },
+	{ MODKEY|ShiftMask,     XK_Return,                  zoom,           {0} },
+	{ MODKEY,               XK_Tab,                     view,           {0} },
+	{ MODKEY,               XK_c,                       killclient,     {0} },
+	{ MODKEY,               XK_t,                       setlayout,      {.v = &layouts[0]} },
+	{ MODKEY,               XK_f,                       setlayout,      {.v = &layouts[1]} },
+	{ MODKEY,               XK_m,                       setlayout,      {.v = &layouts[2]} },
+	{ MODKEY,               XK_space,                   setlayout,      {0} },
+	{ MODKEY|ShiftMask,     XK_space,                   togglefloating, {0} },
+	{ MODKEY,               XK_0,                       view,           {.ui = ~0 } },
+	{ MODKEY|ShiftMask,     XK_0,                       tag,            {.ui = ~0 } },
+	{ MODKEY,               XK_comma,                   focusmon,       {.i = -1 } },
+	{ MODKEY,               XK_period,                  focusmon,       {.i = +1 } },
+	{ MODKEY|ShiftMask,     XK_comma,                   tagmon,         {.i = -1 } },
+	{ MODKEY|ShiftMask,     XK_period,                  tagmon,         {.i = +1 } },
+	{ MODKEY,               XK_minus,                   setgaps,        {.i = -1 } },
+	{ MODKEY,               XK_equal,                   setgaps,        {.i = +1 } },
+	{ MODKEY|ShiftMask,     XK_equal,                   setgaps,        {.i = 0  } },
+	{ MODKEY,               XK_Left,                    shiftview,      {.i = -1 } },
+	{ MODKEY,               XK_Right,                   shiftview,      {.i = +1 } },
+	TAGKEYS(                XK_1,                                        0)
+	TAGKEYS(                XK_2,                                        1)
+	TAGKEYS(                XK_3,                                        2)
+	TAGKEYS(                XK_4,                                        3)
+	TAGKEYS(                XK_5,                                        4)
+	TAGKEYS(                XK_6,                                        5)
+	TAGKEYS(                XK_7,                                        6)
+	TAGKEYS(                XK_8,                                        7)
+	{ MODKEY|ShiftMask,     XK_q,                       quit,           {0} },
+};
+
+/* button definitions */
+/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
+static const Button buttons[] = {
+	/* click                event mask      button          function        argument */
+	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
+	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
+	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
+	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
+	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
+	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
+	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
+	{ ClkTagBar,            0,              Button1,        view,           {0} },
+	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
+	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
+	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+};
+
diff --git a/drw.o b/drw.o
new file mode 100644
index 0000000..9437a24
Binary files /dev/null and b/drw.o differ
diff --git a/dwm.c b/dwm.c
index f1d86b2..e49e5a4 100644
--- a/dwm.c
+++ b/dwm.c
@@ -32,6 +32,7 @@
 #include <sys/wait.h>
 #include <X11/cursorfont.h>
 #include <X11/keysym.h>
+#include <X11/XF86keysym.h>
 #include <X11/Xatom.h>
 #include <X11/Xlib.h>
 #include <X11/Xproto.h>
@@ -119,6 +120,7 @@ struct Monitor {
 	int by;               /* bar geometry */
 	int mx, my, mw, mh;   /* screen size */
 	int wx, wy, ww, wh;   /* window area  */
+	int gappx;            /* gaps between windows */
 	unsigned int seltags;
 	unsigned int sellt;
 	unsigned int tagset[2];
@@ -200,6 +202,7 @@ static void sendmon(Client *c, Monitor *m);
 static void setclientstate(Client *c, long state);
 static void setfocus(Client *c);
 static void setfullscreen(Client *c, int fullscreen);
+static void setgaps(const Arg *arg);
 static void setlayout(const Arg *arg);
 static void setmfact(const Arg *arg);
 static void setup(void);
@@ -641,6 +644,7 @@ createmon(void)
 	m->nmaster = nmaster;
 	m->showbar = showbar;
 	m->topbar = topbar;
+	m->gappx = gappx;
 	m->lt[0] = &layouts[0];
 	m->lt[1] = &layouts[1 % LENGTH(layouts)];
 	strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
@@ -1507,6 +1511,16 @@ setfullscreen(Client *c, int fullscreen)
 	}
 }
 
+void
+setgaps(const Arg *arg)
+{
+	if ((arg->i == 0) || (selmon->gappx + arg->i < 0))
+		selmon->gappx = 0;
+	else
+		selmon->gappx += arg->i;
+	arrange(selmon);
+}
+
 void
 setlayout(const Arg *arg)
 {
@@ -1697,18 +1711,18 @@ tile(Monitor *m)
 	if (n > m->nmaster)
 		mw = m->nmaster ? m->ww * m->mfact : 0;
 	else
-		mw = m->ww;
-	for (i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
-		if (i < m->nmaster) {
-			h = (m->wh - my) / (MIN(n, m->nmaster) - i);
-			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), 0);
-			if (my + HEIGHT(c) < m->wh)
-				my += HEIGHT(c);
+		mw = m->ww - m->gappx;
+	for (i = 0, my = ty = m->gappx, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+			if (i < m->nmaster) {
+			h = (m->wh - my) / (MIN(n, m->nmaster) - i) - m->gappx;
+			resize(c, m->wx + m->gappx, m->wy + my, mw - (2*c->bw) - m->gappx, h - (2*c->bw), 0);
+			if (my + HEIGHT(c) + m->gappx < m->wh)
+				my += HEIGHT(c) + m->gappx;
 		} else {
-			h = (m->wh - ty) / (n - i);
-			resize(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), 0);
-			if (ty + HEIGHT(c) < m->wh)
-				ty += HEIGHT(c);
+			h = (m->wh - ty) / (n - i) - m->gappx;
+			resize(c, m->wx + mw + m->gappx, m->wy + ty, m->ww - mw - (2*c->bw) - 2*m->gappx, h - (2*c->bw), 0);
+			if (ty + HEIGHT(c) + m->gappx < m->wh)
+				ty += HEIGHT(c) + m->gappx;
 		}
 }
 
diff --git a/shiftview.c b/shiftview.c
new file mode 100644
index 0000000..e82053a
--- /dev/null
+++ b/shiftview.c
@@ -0,0 +1,19 @@
+/** Function to shift the current view to the left/right
+ *
+ * @param: "arg->i" stores the number of tags to shift right (positive value)
+ *          or left (negative value)
+ */
+void
+shiftview(const Arg *arg) {
+	Arg shifted;
+
+	if(arg->i > 0) // left circular shift
+		shifted.ui = (selmon->tagset[selmon->seltags] << arg->i)
+		   | (selmon->tagset[selmon->seltags] >> (LENGTH(tags) - arg->i));
+
+	else // right circular shift
+		shifted.ui = selmon->tagset[selmon->seltags] >> (- arg->i)
+		   | selmon->tagset[selmon->seltags] << (LENGTH(tags) + arg->i);
+
+	view(&shifted);
+}
